{"slug":"curseurs-du-developpement-web","title":"Les curseurs du d\u00e9veloppement web","date":{"date":"2025-01-01 00:00:00.000000","timezone_type":3,"timezone":"UTC"},"intro":"Quels sont les l\u00e9viers pour cr\u00e9er ou faire \u00e9voluer une application web ? L\u2019enjeu n\u2019est pas seulement technique mais carr\u00e9ment commercial, politique ou visionnaire ! Nous t\u00e2cherons d\u2019en d\u00e9crire quelques-uns \u2026","content":"<p>Quand vient le temps de retranscrire un besoin m\u00e9tier en code informatique pour r\u00e9aliser une fonction ou remplir toute sorte de t\u00e2che, les moyens pour y parvenir sont absolument \u00e9tendus et h\u00e9t\u00e9rog\u00e8nes. Ce sont des choix qui pr\u00e9sentent tous leurs avantages et leurs inconv\u00e9nients. Voyons ensemble quelqu\u2019un de ces choix et sur quels crit\u00e8res se d\u00e9cider.<\/p>\n\n<h2>Le crit\u00e8re du besoin et de son \u00e9volutivit\u00e9<\/h2>\n\n<p>La premi\u00e8re vision \u00e0 porter est celle du besoin auquel l\u2019application va r\u00e9pondre, et celui de son \u00e9volution potentielle. Si le besoin correspond \u00e0 un produit d\u00e9j\u00e0 existant, que ce soit un blog, un e-commerce, une GED, il sera surement plus efficace d\u2019utiliser une solution \u00ab sur \u00e9tag\u00e8re \u00bb. On peut citer par exemple WordPress pour un blog, Sylius pour un e-commerce, ou alfresco pour la gestion documentaire. Mais si le besoin diff\u00e8re m\u00eame l\u00e9g\u00e8rement de la solution toute faite, le point de bascule est difficile \u00e0 trouver entre modifier la solution existante et cr\u00e9er une solution toute pr\u00eate.<\/p>\n\n<p>L\u2019enjeu n\u2019est pas tant la fonctionnalit\u00e9 elle-m\u00eame, mais la possibilit\u00e9 de la faire faire perdurer dans le temps. Pour vous donner un exemple, si on souhaite modifier le tunnel de finalisation d\u2019une commande dans un e-commerce, il n\u2019est pas s\u00fbr que les modifications qui seront apport\u00e9s seront compatibles avec les futures version de la solution. Hors, les mise \u00e0 jour des solutions utilis\u00e9s sont indispensables, car elles peuvent concern\u00e9e des points de s\u00e9curit\u00e9 critiques.<\/p>\n\n<h2>Le crit\u00e8re de la dur\u00e9e de vie<\/h2>\n\n<p>Bien entendu, on ne prendra le m\u00eame soin dans les choix d\u2019architecture selon la vision sur le long terme du projet.<\/p>\n \n<p>Il est tout \u00e0 fait adapt\u00e9 de gagner du temps et de l\u2019\u00e9nergie pour un site \u00e9v\u00e8nementiel qui va accompagner un salon ou un colloque pendant une semaine. L\u2019enjeu de s\u00e9curit\u00e9, de maintenabilit\u00e9 \u00e9tant minime, faire vite, peu lisible, peu optimis\u00e9 est \u00e9conomique rationnel.<\/p>\n\n<p>Mais si on travaille sur une application qui doit accompagner au quotidien le m\u00e9tier de centaines de travailleurs \ndans une usine sur plusieurs ann\u00e9es, le crit\u00e8re de la maintenabilit\u00e9 et de la qualit\u00e9 globale devient primordiale. Non pas pour avoir une application qui \u00ab fonctionne bien \u00bb, mais pour avoir une application qui ne sera pas trop on\u00e9reuse \u00e0 maintenir dans le temps. Dans ce cas, il vaut mieux d\u00e9penser 100k\u20ac dans une application puis 10k\u20ac par an pour sa maintenance, plut\u00f4t que 50k\u20ac au d\u00e9part puis 20k\u20ac par an. Et ce n\u2019est pas seulement une question de cout : la deuxi\u00e8me application connaitra plus d\u2019arr\u00eats critiques que la premi\u00e8re, entrainant bien d\u2019autres d\u00e9convenues.<\/p>\n\n<h2>Le crit\u00e8re de la durabilit\u00e9<\/h2>\n\n<p>Que ce soit pour le langage informatique, pour le framework, ou pour les patrons de conceptions, ces choix sont toujours difficiles, car ils sont tr\u00e8s clivants pour la suite du projet.<\/p>\n\n<p>Dans le cadre d\u2019une application web, le choix d\u2019utiliser ou non un framework javascript est crucial. Et le choix du framework lui-m\u00eame est carr\u00e9ment corn\u00e9lien : bien malin qui peut pr\u00e9dire quel framework aura le meilleur support, la meilleure maintenabilit\u00e9 dans le temps, et s\u2019adaptera le mieux aux \u00e9volutions futures du m\u00e9tier ! C\u2019est d\u2019ailleurs aussi le cas dans les autres langages, m\u00eame si c\u2019est dans une moindre mesure.<\/p>\n\n<p>Pour faire face \u00e0 cette situation, garder une hygi\u00e8ne de code passe par le faible engagement envers un framework, et une isolation du code qui d\u00e9pend de ce framework. La d\u00e9marche sera alors de coder le c\u0153ur d\u2019une application sans jamais utiliser les \u00e9l\u00e9ments d\u2019un framework. Puis ajouter le lien avec le framework comme une surcouche qui va utiliser ce c\u0153ur. Cette d\u00e9marche c\u2019est le c\u0153ur du DDD : domain driven design.<\/p>\n\n\n<h3>Le mot de la fin<\/h3>\n\n<p>Choisir, c\u2019est renoncer. On a raison de le dire. Parfois, on peut repousser ou contourner le choix, c\u2019est rester \nflexible. Parfois, on peut le trancher, c\u2019est l\u2019assumer. Identifier quelle position prendre pour chaque situation, \u00e7a rel\u00e8ve du g\u00e9nie \u2026 le g\u00e9nie informatique \ud83d\ude42<\/p>"}
<?php

namespace App\Repository;

use App\Entity\Article;

class ArticleRepository
{
    public function findAll(): array
    {
        return [
            new Article(
                'curseurs-du-developpement-web',
                'Les curseurs du dÃ©veloppement web',
                new \DateTime('2025-01-01'),
                'Quels sont les lÃ©viers pour crÃ©er ou faire Ã©voluer une application web ? Lâ€™enjeu nâ€™est pas seulement technique mais carrÃ©ment commercial, politique ou visionnaire ! Nous tÃ¢cherons dâ€™en dÃ©crire quelques-uns â€¦',
                <<<HTML
<p>Quand vient le temps de retranscrire un besoin mÃ©tier en code informatique pour rÃ©aliser une fonction ou remplir toute sorte de tÃ¢che, les moyens pour y parvenir sont absolument Ã©tendus et hÃ©tÃ©rogÃ¨nes. Ce sont des choix qui prÃ©sentent tous leurs avantages et leurs inconvÃ©nients. Voyons ensemble quelquâ€™un de ces choix et sur quels critÃ¨res se dÃ©cider.</p>

<h2>Le critÃ¨re du besoin et de son Ã©volutivitÃ©</h2>

<p>La premiÃ¨re vision Ã  porter est celle du besoin auquel lâ€™application va rÃ©pondre, et celui de son Ã©volution potentielle. Si le besoin correspond Ã  un produit dÃ©jÃ  existant, que ce soit un blog, un e-commerce, une GED, il sera surement plus efficace dâ€™utiliser une solution Â« sur Ã©tagÃ¨re Â». On peut citer par exemple WordPress pour un blog, Sylius pour un e-commerce, ou alfresco pour la gestion documentaire. Mais si le besoin diffÃ¨re mÃªme lÃ©gÃ¨rement de la solution toute faite, le point de bascule est difficile Ã  trouver entre modifier la solution existante et crÃ©er une solution toute prÃªte.</p>

<p>Lâ€™enjeu nâ€™est pas tant la fonctionnalitÃ© elle-mÃªme, mais la possibilitÃ© de la faire faire perdurer dans le temps. Pour vous donner un exemple, si on souhaite modifier le tunnel de finalisation dâ€™une commande dans un e-commerce, il nâ€™est pas sÃ»r que les modifications qui seront apportÃ©s seront compatibles avec les futures version de la solution. Hors, les mise Ã  jour des solutions utilisÃ©s sont indispensables, car elles peuvent concernÃ©e des points de sÃ©curitÃ© critiques.</p>

<h2>Le critÃ¨re de la durÃ©e de vie</h2>

<p>Bien entendu, on ne prendra le mÃªme soin dans les choix dâ€™architecture selon la vision sur le long terme du projet.</p>
 
<p>Il est tout Ã  fait adaptÃ© de gagner du temps et de lâ€™Ã©nergie pour un site Ã©vÃ¨nementiel qui va accompagner un salon ou un colloque pendant une semaine. Lâ€™enjeu de sÃ©curitÃ©, de maintenabilitÃ© Ã©tant minime, faire vite, peu lisible, peu optimisÃ© est Ã©conomique rationnel.</p>

<p>Mais si on travaille sur une application qui doit accompagner au quotidien le mÃ©tier de centaines de travailleurs 
dans une usine sur plusieurs annÃ©es, le critÃ¨re de la maintenabilitÃ© et de la qualitÃ© globale devient primordiale. Non pas pour avoir une application qui Â« fonctionne bien Â», mais pour avoir une application qui ne sera pas trop onÃ©reuse Ã  maintenir dans le temps. Dans ce cas, il vaut mieux dÃ©penser 100kâ‚¬ dans une application puis 10kâ‚¬ par an pour sa maintenance, plutÃ´t que 50kâ‚¬ au dÃ©part puis 20kâ‚¬ par an. Et ce nâ€™est pas seulement une question de cout : la deuxiÃ¨me application connaitra plus dâ€™arrÃªts critiques que la premiÃ¨re, entrainant bien dâ€™autres dÃ©convenues.</p>

<h2>Le critÃ¨re de la durabilitÃ©</h2>

<p>Que ce soit pour le langage informatique, pour le framework, ou pour les patrons de conceptions, ces choix sont toujours difficiles, car ils sont trÃ¨s clivants pour la suite du projet.</p>

<p>Dans le cadre dâ€™une application web, le choix dâ€™utiliser ou non un framework javascript est crucial. Et le choix du framework lui-mÃªme est carrÃ©ment cornÃ©lien : bien malin qui peut prÃ©dire quel framework aura le meilleur support, la meilleure maintenabilitÃ© dans le temps, et sâ€™adaptera le mieux aux Ã©volutions futures du mÃ©tier ! Câ€™est dâ€™ailleurs aussi le cas dans les autres langages, mÃªme si câ€™est dans une moindre mesure.</p>

<p>Pour faire face Ã  cette situation, garder une hygiÃ¨ne de code passe par le faible engagement envers un framework, et une isolation du code qui dÃ©pend de ce framework. La dÃ©marche sera alors de coder le cÅ“ur dâ€™une application sans jamais utiliser les Ã©lÃ©ments dâ€™un framework. Puis ajouter le lien avec le framework comme une surcouche qui va utiliser ce cÅ“ur. Cette dÃ©marche câ€™est le cÅ“ur du DDD : domain driven design.</p>


<h3>Le mot de la fin</h3>

<p>Choisir, câ€™est renoncer. On a raison de le dire. Parfois, on peut repousser ou contourner le choix, câ€™est rester 
flexible. Parfois, on peut le trancher, câ€™est lâ€™assumer. Identifier quelle position prendre pour chaque situation, Ã§a relÃ¨ve du gÃ©nie â€¦ le gÃ©nie informatique ğŸ™‚</p>
HTML,
            ),
            new Article(
                'voyage-en-ddd',
                'Voyage du Legacy au DDD',
                new \DateTime('2022-06-17'),
                'Voici mon livre blanc sur la transition dâ€™un projet dâ€™un code legacy vers une application en Domain Driven Design. Jâ€™y partage ma dÃ©marche et lâ€™importance de mettre le mÃ©tier au cÅ“ur du travail du dÃ©veloppeur.',
                <<<HTML
<p>Je suis fier de vous prÃ©senter ce livre blanc qui traite de la transition dâ€™un projet depuis une base de code legacy vers une application en Domain Driven Design.</p>
<p>Jâ€™y esquisse ma dÃ©marche, la quÃªte de sens, la volontÃ© de faire transpirer le mÃ©tier au serivec du quel le dÃ©veloppeur apporte son talent. Faites-en bon usage !</p>
<p>
<a href="/share/voyage-du-legacy-au-ddd.pdf"
target="_blank"
class="text-md bg-indigo-500 hover:bg-indigo-600 text-white shadow-sm rounded-md px-5 py-2.5"
>
    TÃ©lÃ©charger le livre blanc
</a>
</p>
HTML
            ),
        ];
    }

    private function filter(string $search): array
    {
        $list = array_filter($this->findAll(), function (Article $article) use ($search): bool {
            return str_contains($article->content, $search);
        });
        usort($list, fn($a, $b) => $a->date < $b->date);

        return $list;
    }

    public function filterPaginated(string $search, int $page, int $perPage): array
    {
        $list = $search !== '' ? $this->filter($search) : $this->findAll();
        usort($list, fn($a, $b) => $a->date < $b->date);

        return array_slice($list, ($page - 1) * $perPage, $perPage);
    }

    public function count(string $search = ''): int
    {
        return count($search === '' ? $this->findAll() : $this->filter($search));
    }

    public function find(string $slug): ?Article
    {
        return array_values(array_filter($this->findAll(), fn(Article $article) => $article->slug === $slug))[0] ?? null;
    }
}